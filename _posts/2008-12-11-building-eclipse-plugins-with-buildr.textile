---
layout: post
title: Building Eclipse plugins with Buildr
---

As of now, the right way to build Eclipse plugins is to use the releng code or Buckminster.

It all comes down to an ant task that calls a <a href="http://download.eclipse.org/eclipse/downloads/drops/R-3.4.1-200809111700/index.php#JDTCORE">JDT batch compiler</a> (copied from the scripts of SWTBot):

@
<pre>
<javac destdir="${temp.folder}/@dot.bin" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" 
      includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" 
      source="${bundleJavacSource}" target="${bundleJavacTarget}">
			<compilerarg line="${compilerArg}" compiler="${build.compiler}"/>
			<classpath refid="@dot.classpath" />
			<src path="src/"/>
			<compilerarg value="@${basedir}/javaCompiler...args" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/>
			<compilerarg line="-log '${temp.folder}/@dot.bin${logExtension}'" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/>
		</javac>
</pre>
@

This code is pretty heavy because you have to specify the classpath yourself (the @@dot.classpath@ in there).

I have watched <a href="http://incubator.apache.org/buildr/">Buildr</a> since its inception. I had made the wish to hack it in a way that I could build our plugins with it.

Essentially, what's cool with <a href="http://incubator.apache.org/buildr/">Buildr</a> is that it does what you want it to do, not more. It is written in a minimal way, so you can script and chain tasks. Think of it as make for Java.

<a href="http://ketan.padegaonkar.name">Ketan</a> <a href="http://mail-archives.apache.org/mod_mbox/incubator-buildr-user/200811.mbox/browser">came up to the Buildr user list</a> some time ago with the same idea. He is maintaining SWTBot and he already hacked Buildr to make it behave for plugins.

Together, we are opening a new project <a href="http://code.google.com/p/buildr4eclipse/">Buildr4eclipse</a>, that will take place on <a href="http://code.google.com/p/buildr4eclipse/">Google Code</a> and <a href="http://github.com/ketan/buildr4eclipse/tree">Github</a>. 
We are going to provide an extension to Buildr to make it possible to build Eclipse plugins, first by plugging the JDT compiler in, then by making it even easier by using the dependencies declared in the manifest directly.

We welcome feedback and your help towards that goal.

This work takes place as <a href="http://www.eclipse.org/stp">SOA Tools</a> <a href="http://wiki.eclipse.org/STP/Build/OnEclipseInfrastructure">is working on its build system</a> to make it more adaptable and suited to our brand new sub-projects. 